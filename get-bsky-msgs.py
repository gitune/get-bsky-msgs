#!/usr/bin/env python
# coding: UTF-8
#
# get self Bluesky posts
#
# necessary environment variables:
#   BSKY_ID: Bluesky ID like digitune.bsky.social
#   BSKY_APPPASSWORD: App Password generated by you in Bluesky
#
import re
from atproto import Client, Session, SessionEvent
from typing import Optional
from urllib.parse import urlparse
from os import environ
# for debug
import pprint

# constants
SESSION_FILE = 'bsky_session.txt'

# bsky auth
def get_session() -> Optional[str]:
    try:
        with open(SESSION_FILE) as f:
            return f.read()
    except FileNotFoundError:
        return None

def save_session(session_string: str) -> None:
    with open(SESSION_FILE, 'w') as f:
        f.write(session_string)

def on_session_change(event: SessionEvent, session: Session) -> None:
    print('Session changed:', event, repr(session))
    if event in (SessionEvent.CREATE, SessionEvent.REFRESH):
        print('Saving changed session')
        save_session(session.export())

def init_client() -> Client:
    client = Client()
    client.on_session_change(on_session_change)

    session_string = get_session()
    if session_string:
        print('Reusing session')
        client.login(session_string=session_string)
    else:
        print('Creating new session')
        client.login(environ['BSKY_ID'], environ['BSKY_APPPASSWORD'])

    return client

def make_bsky_link(handle, uri_key):                                                                                                                           return f'https://bsky.app/profile/{handle}/post/{uri_key}'

def get_bsky_msgs():
    # login
    client = init_client()

    # get recent messages
    data = client.get_author_feed(
        actor=client.me.did,
        filter='posts_no_replies',
        limit=30,
    )
    for feed in data.feed:
        # filter replies
        if feed.reply:
            if feed.reply.parent.author.did != client.me.did:
                continue # reply to someone
        pprint.pprint(feed) # debug

        # extract links and images
        uris = []
        images = []
        if feed.post.author.did == client.me.did: # my post
            # get text
            text = feed.post.record.text
            print("orig=" + text) # debug
            # extract links (no tags)
            if feed.post.record.facets:
                for facet in feed.post.record.facets:
                    if hasattr(facet.features[0], 'uri'):
                        uris.append(facet.features[0].uri)
            if feed.post.embed:
                # get attached images
                if hasattr(feed.post.embed, 'images'):
                    for image in feed.post.embed.images:
                        images.append(image.fullsize)
                # re-post with comment
                if hasattr(feed.post.embed, 'record'):
                    bsky_link = make_bsky_link(feed.post.embed.record.author.handle, re.sub('.*/([^/]+)$', '\\1', feed.post.embed.record.uri))
                    text = f'{text}\nRT {bsky_link}'
                    uris.append(bsky_link)
        else: # re-post
            bsky_link = make_bsky_link(feed.post.author.handle, re.sub('.*/([^/]+)$', '\\1', feed.post.uri))
            text = f'RT {bsky_link}'
            uris.append(bsky_link)

        for uri in uris:
            uri_o = urlparse(uri)
            (text, num) = re.subn('([^/])' + uri_o.hostname + '.+\\.\\.\\.', '\\1' + uri, text, 1)
            if num == 0:
                (text, num) = re.subn('([^/])' + uri_o.hostname + uri_o.path, '\\1' + uri, text, 1)
            if num == 0:
                text = re.sub('([^/])' + uri_o.hostname, '\\1' + uri, text, 1)

        print('text=' + text) # debug
        for uri in uris:
            print('uri=' + uri) # debug
        for image_url in images:
            print('image_url=' + image_url) # debug
        print('==================================') # debug

if __name__ == '__main__':
    get_bsky_msgs()
